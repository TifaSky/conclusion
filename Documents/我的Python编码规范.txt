我的Python编码规范

1.固定格式
  文件头：#!/usr/bin/env python
  编码声明： #-*- coding:utf8 -*- 

2.应用程序要函数化，减少无函数包装的代码块

3.适当注释
  注释前后都要有个空行
  # 注释说明 每行以#和一个空格开始，对于技巧性的部分必须注释
  """ """ 文档注释，表示如何使用这个包 模块 类 方法 函数。
          可以包含使用示例和单元测试。这些可以通过对象的__doc__读取。
          第一行描述概要，空一行，然后继续剩下的部分

  函数, 方法, 以及生成器的文档：

  文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.

  关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.

  Args:
    列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.
  Returns: (或者 Yields: 用于生成器)
    描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.
  Raises:
    列出与接口有关的所有异常

  类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.



4.空格 空行
  括号前后不加空格，逗号后面加空格前面不加
  不使用空格垂直对齐多行标记（, =, :）
  二元算数、逻辑运算符前后加空格
  类 函数定义间加空行
  import不同种类的模块间加空行
  函数中的逻辑段落之间加空行

5.断行，行的最大长度不得超过100。折叠长行的方法：
  长变量名变短变量名
  括号内换行
  尽量不使用续行符强行断行，断行的位置在操作符前，换行后多一个缩进，以区分下一个层级的代码
  如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接
  在注释中，如果必要，将长的URL放在一行上

6.命名
  常量使用大写字母
  类名使用大写字母开头的单词例如(如CapWords, 即Pascal风格)
  模块名(变量名 函数名 参数名)使用小写加下划线的方式(如lower_with_under.py)
  用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含)
  用双下划线(__)开头的实例变量或方法表示类内私有
  避免出现：单字符名称（计数器、迭代器除外）
            包 模块命中的连字符-
            双下划线开头并结尾的名称

7.将相关的类和顶级函数放在同一个模块里，便于维护

8.导入格式
  每个导入独占一行
  导入顺序分组：标准库导入 第三方库导入 应用程序指定导入
  当从模块中 import 多个对象且超过一行时，使用如下断行法（此语法 py2.5 以上版本才支持）
  from module import (obj1, obj2, obj3, obj4,
      obj5, obj6)

9.如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样

10.避免在循环中用+和+=操作符来累加字符串. 
  由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 .join 连接列表
11.在文件和sockets结束时, 显式的关闭它
  使用with语句管理文件，对于不支持使用”with”语句的类似文件的对象,使用 contextlib.closing()